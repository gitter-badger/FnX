<#
	var rangeReduceFrom = System.Linq.Enumerable.Range(1,9);
	var rangeReduceFromTo = rangeReduceFrom.Select (reduceFrom => Enumerable.Range(1,reduceFrom-1).Select (reduceTo=>new{reduceFrom,reduceTo})). SelectMany (e=>e);
#>

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FnX
{
    public static partial class Fn
    {
	<# rangeReduceFromTo.ToList().ForEach(t=>{

	var resultTypes = Enumerable.Range(t.reduceFrom-t.reduceTo+1,t.reduceTo).Select (e => "T" + e).Concat(new[]{"TOut"}).Aggregate ((a,s) => a+", " +s);
	var funcTypes = Enumerable.Range(1,t.reduceFrom).Select (e => "T" + e).Concat(new[]{"TOut"}).Aggregate ((a,s) => a+", " +s);
	var funcParameters = Enumerable.Range(1,t.reduceFrom-t.reduceTo).Select (e => "T" + e + " t" + e).Aggregate ((a,s) => a+", "+s);
	var returnLambdaIn = Enumerable.Range(t.reduceFrom-t.reduceTo+1,t.reduceTo).Select (e => "t" + e).Aggregate ((a,s) => a+", " +s);
	var returnLambdaOut = Enumerable.Range(1,t.reduceFrom).Select (e => "t" + e).Aggregate ((a,s) => a+", " +s);
		
	#>
	public static Func<<#=resultTypes #>> Func<<#=funcTypes #>>(this Func<<#=funcTypes #>> func, <#=funcParameters #>)
        {
            return (<#=returnLambdaIn #>) => func(<#=returnLambdaOut #>);
        }
	<#
		}); #>

    }
}
